generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  firstName String  @db.VarChar(255)
  lastName  String  @db.VarChar(255)
  photo     String?

  username String       @unique
  password String
  role     RoleEnumType

  isFirstLogin Boolean @default(true)
  isBlocked    Boolean @default(false)

  createdBy String   @default("system")
  updatedBy String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogsPublished Blog[]

  @@index([id, firstName, lastName, username])
}

model Office {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(255)
  address    String  @db.VarChar(255)
  city       String  @db.VarChar(255)
  state      String  @db.VarChar(255)
  country    String  @db.VarChar(255)
  postalCode String? @db.VarChar(20)

  createdBy  String       @default("system")
  updatedBy  String       @default("system")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  jobOpening JobOpening[]

  @@unique([name, city])
  @@index([id, name, city])
}

model JobOpening {
  id          String  @id @default(uuid())
  title       String  @db.VarChar(255)
  description String  @db.Text
  locationId  String
  location    Office? @relation(fields: [locationId], references: [id])
  experience  String? @db.VarChar(255)

  isPublished Boolean @default(false)

  createdBy   String        @default("system")
  updatedBy   String        @default("system")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  application Application[]

  @@index([id, title])
}

model Application {
  id String @id @default(uuid())

  jobOpeningId String
  jobOpening   JobOpening? @relation(fields: [jobOpeningId], references: [id])

  status ApplicationStatus @default(applied)

  fullName String @db.VarChar(255)
  email    String @db.VarChar(255)
  phone    String @db.VarChar(20)

  resume      String  @db.VarChar(255)
  coverLetter String? @db.Text
  linkedIn    String? @db.VarChar(255)

  wheredidyouhear           Wheredidyouhear
  hasSubscribedToNewsletter Boolean         @default(false)

  createdBy String   @default("system")
  updatedBy String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, jobOpeningId])
}

model Category {
  id    String              @id @default(uuid())
  slug  String              @unique
  name  String              @db.VarChar(255)
  blogs CategoriesOnBlogs[]

  isPublished Boolean @default(false)

  createdBy String   @default("system")
  updatedBy String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, name])
}

model Blog {
  id              String @id @default(uuid())
  slug            String @unique
  title           String @db.VarChar(255)
  description     String @db.Text
  content         String @db.Text
  featuredImageId String
  featuredImage   Media? @relation(fields: [featuredImageId], references: [id])

  categories CategoriesOnBlogs[]
  tags       String[]            @db.VarChar(255)

  authorId String
  author   User?  @relation(fields: [authorId], references: [id])

  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)
  isDeleted   Boolean @default(false)

  createdBy String   @default("system")
  updatedBy String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, title])
}

model CategoriesOnBlogs {
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  createdAt  DateTime @default(now())
  assignedBy String   @default("system")

  @@id([blogId, categoryId])
}

model Media {
  id   String    @id @default(uuid())
  url  String
  type MediaType

  createdBy String   @default("system")
  updatedBy String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]
}

enum MediaType {
  image
  video
  gif
  audio
  pdf
  other
}

enum ApplicationStatus {
  applied
  in_review
  hired
  rejected
}

enum Wheredidyouhear {
  friend
  social_media
  website
  job_portal
  other
}

enum RoleEnumType {
  sales
  content
  hr
  admin
}
